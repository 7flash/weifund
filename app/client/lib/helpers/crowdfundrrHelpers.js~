/**
Helper functions

@module CrowdFundrr
**/

/**
The CrowdFundrr class containing helper functions

@class CrowdFundrr
@constructor
**/

CrowdFundrr = {};

/**
Get the number of campaigns on CrowdFundrr, returns string.

@method (numCampaigns)
**/

CrowdFundrr.numCampaigns = function(){
    return this.contract.call().numCampaigns().toNumber(10);   
};

/**
Is a valid campaign id.

@method (isCampaign)
**/

CrowdFundrr.isCampaign = function(cid){
    if(!_.isNumber(cid))
		return false;

	if(cid < 0 || cid >= this.numCampaigns())
		return false;

    return true;
};

/**
Is valid value for donation.

@method (isValue)
**/

CrowdFundrr.isValue = function(value){
    return (!_.isUndefined(value) && _.isNumber(value) && value > 0);
};

/**
Is valid timestamp.

@method (isTimestamp)
**/

CrowdFundrr.isTimestamp = function(value){
    return (!_.isUndefined(value) && _.isNumber(value) && value > 0 && moment.unix(value).isValid());
};

/**
Is category id number.

@method (isCategory)
**/

CrowdFundrr.isCategory = function(id){
    if(_.isUndefined(id) || !_.isNumber(id) || id < 0)
        return false;
    else
        id = parseInt(id);
    
        if(id >= 0 || id < this.numCampaigns())
            return true;
};

/**
Will return category name or id number (i.e. the array index).

@method (category)
**/

CrowdFundrr.category = function(id_or_name){
    if(_.isString(id_or_name))
        return this.categories.indexOf(id_or_name);
    
    if(_.isNumber(id_or_name))
        if(id_or_name >= 0 && id_or_name < this.categories.length)
            return this.categories[id_or_name];
    
    return false;
};

/**
Deploy the crowdfundrr contract.

@method (deploy)
**/

CrowdFundrr.deploy = function(){
    var address = web3.eth.sendTransaction({from: web3.eth.accounts[0], code: this.hex});
    return address;
};

/**
Setup the CrowdFundrr Contract object and instance.

@method (setup)
**/

CrowdFundrr.setup = function(){
    var CrowdFundrrObject = web3.eth.contract(this.abi);
    this.contract = new CrowdFundrrObject(this.address);
};

/**
Create a new campaign.

CrowdFundrr.newCampaign(name, website, beneficiary, goal, timelimit, category);

@method (newCampaign)
**/

CrowdFundrr.newCampaign = function(name, website, beneficiary, goal, timelimit, category){
    if(!_.isString(name)
       || !_.isString(website)
       || !web3.isAddress(beneficiary) 
       || !this.isValue(goal)
       || !_.isNumber(timelimit) 
       || !this.isCategory(category))
        return false;
    
    if(timelimit <= moment().unix())
        return false;
    
    if(name.length < 3 || name.length > 32 || website < 4 || website.length > 32)
        return false;
    
	this.contract.sendTransaction({from: web3.eth.accounts[0]}).newCampaign(/*name, website,*/beneficiary, goal, timelimit, category);
	return true;
};

/**
Donate to a campaign with id#.

@method (contribute)
**/

CrowdFundrr.contribute = function(cid, value){
    if(this.isCampaign(cid) && this.isValue(value))
        return this.contract.sendTransaction({from: web3.eth.accounts[0], value: value}).contribute(cid);
};

/**
Refund out campaign funds from a specific campaign.

@method (refund)
**/

CrowdFundrr.refund = function(address, cid){
    if(this.isCampaign(cid) && web3.isAddress(address))
        return this.contract.sendTransaction({from: address}).refund(cid);
};

/**
Payout campaign contributions to benificiary address.

@method (payout)
**/

CrowdFundrr.payout = function(cid){
    if(this.isCampaign(cid))
        return this.contract.sendTransaction({from: web3.eth.accounts[0]}).payout(cid);
};

/**
Get a specific campaign that a user has started

@method (userCampaign)
**/

CrowdFundrr.userCampaign = function(address, u_cid){
    if(this.isNumber(u_cid) && web3.isAddress(address)){
        u_cid = parseInt(u_cid);
        var cid = this.contract.call().userCampaigns(address, u_cid).toNumber();
        
        if(!this.isCampaign(cid))
            return false;
        
        return this.campaign(cid);
    }
};

/**
Returns a user object, that can be used to get the users campain information.

@method (user)
**/

CrowdFundrr.user = function(address){
    if(web3.isAddress(address)){
        var raw = this.contract.call().users(address);
        if(_.isUndefined(raw) || !_.isObject(raw))
            return false;
        
        var numCampaigns = raw[0].toNumber();
        var hasCampaigns = numCampaigns > 0 ? true : false;
        
        var return_object = {
            address: address,
            numCampaigns: numCampaigns,
            hasCampaigns: hasCampaigns,
            campaign: function(u_cid){
                if(hasCampaigns && this.isCid(u_cid))
                    return this.userCampaign(address, u_cid);        
            }.bind(this),
            latest: function(){
                if(hasCampaigns)
                    return this.userCampaign(address, (numCampaigns - 1));
            }.bind(this),
        };
        return return_object;
    }
}

/**
The days between two dates.

@method (days_between)
**/

CrowdFundrr.days_between = function(date1, date2){
    var oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds
    return Math.round(Math.abs((date2.getTime() - date1.getTime())/(oneDay)));
};

/**
Add an http prefix to a url string.

@method (addhttp)
**/

CrowdFundrr.addhttp = function(url){
   if (!/^(f|ht)tps?:\/\//i.test(String(url)))
      url = "http://" + String(url);
   
   return url;
};

/**
Clean up a url for dispay.

@method (cleanURL)
**/

CrowdFundrr.cleanURL = function(string_url){
    return String(string_url).replace("http://", "").replace("https://", "").replace("www.", "");
};

/**
Will nicely display ethereum currency units from wei to a set of options.

@method (weiDisplay)
**/

CrowdFundrr.weiDisplay = function(number, displayOption) {
    var isBigNumber = true;

    if(displayOption == undefined || displayOption === false || displayOption == null)
        displayOption = 2;    

    if(!number)
        return number;

    if(typeof number === 'string' && number.indexOf('0x') === 0)
        number = toDecimal(number);

    if(!(number instanceof BigNumber)) {
        isBigNumber = false;
        number = new BigNumber(number.toString()); // toString to prevent errors, the user have to handle giving correct bignums themselves
    }

    //var arr = ['wie', ['kwei', 1000], ['mwei', 1000000], ['gwei', 1000000000], ['szabo', 1000000000000], ['finney', 1000000000000000], ['ether', 1000000000000000000], ['kether', 1000000000000000000000], ['mether', 1000000000000000000000000], ['gether', 1000000000000000000000000000], ['tether', 1000000000000000000000000000000]];
    var arr1 = ['w', 'Mw', 'Sz', 'Fi', 'E', 'gE', 'tE']; // 1 letter display
    var arr4 = ['wie', 'mwei', 'szb', 'fin', 'eth', 'geth', 'teth']; // 4 letter display
    var arr = [['wie', 1], ['mwei', 1000000], ['szabo', 1000000000000], ['finney', 1000000000000000], ['ether', 1000000000000000000], ['gether', 1000000000000000000000000000], ['tether', 1000000000000000000000000000000]]; // full display
    var den = '';

    if(parseInt(number) > 0){
        for(var i = arr.length - 1; i >= 0; i --)
        {
            var num = number.dividedBy(arr[i][1]);
            if(num >= 1){
                den = String(Math.round(num * 1000) / 1000) + ' ' + (displayOption == 0 ? arr1[i][0] : (displayOption == 1 ? arr4[i][0] : arr[i][0]));
                break;
            }
        }
    }else{
        den = '0 ether';	
    }

    return den;
};

/**
Get CrowdFundrr campaign data and return it as an object.

@method (campaign)
**/

CrowdFundrr.campaign = function(cid){
    if(!this.isCampaign(cid))
        return false;
    
    var raw = this.contract.call().campaigns(cid);
    
    if(_.isUndefined(raw) || !_.isArray(raw))
        return false;
        
    raw.unshift(chance.sentence({words: 2}) + ' Campaign', 'http://' + chance.domain());
    
    if(raw.length < 9)
        return false;
        
    var pledged_bn = raw[6];
    var goal_bn = raw[5];
    var status = raw[8].toNumber();
    var timelimit = raw[4].toNumber();
    var progress = parseFloat(pledged_bn.dividedBy(goal_bn).round(4))*100;			
    var daysToGo = this.days_between(new Date(), new Date(timelimit * 1000));
    var expired = (moment.unix() > timelimit) ? true : false;
    var unit = LocalStore.get('etherUnit');
    var category = raw[7].toNumber();

    var return_data = {
        id: cid,
        name: _.escape(raw[0].toString()),
        url: "/tracker/" + cid.toString(),
        siteUrl: this.url + cid.toString(),
        website: _.escape(this.cleanURL(raw[1].toString())),
        websiteUrl: _.escape(this.addhttp(raw[1].toString())),			
        imageUrl: _.escape(raw[1].toString() + this.imageSuffix),
        benificiary: _.escape(raw[3].toString()),
        goal: web3.fromWei(goal_bn, unit).toNumber(10),
        goalDisplay: this.weiDisplay(raw[5].toString(10), 2),
        backers: raw[9].toNumber(),
        pledged: (status == 1 ? web3.fromWei(goal_bn, unit).toNumber(10) : web3.fromWei(pledged_bn, unit).toNumber(10)),
        pledgedDisplay: parseInt(raw[8]) == 1 ? this.weiDisplay(raw[5].toString(10), 2) : this.weiDisplay(pledged_bn.toString(10), 2),
        owner: raw[2].toString(),
        timelimit: timelimit * 1000,
        timelimitUNIX: timelimit,
        categoryId: category,
        category: this.category(category),
        status: status,
        progress: (status == 1 ? 100 : (progress > 100 ? 100 : Math.round(progress))),
        daysToGo: daysToGo,
        reached: ((progress >= 100 || status == 1) && !expired) ? true : false,
        expired: expired,
        payedOut: (status == 1 && pledged_bn.toNumber() == 0) ? true : false,      
        contribute: function(value){
            this.contribute(cid, value);
        },
        refund: function(from_address){
            this.refund(from_address, cid);
        },
        payout: function(){
            this.payout(cid);
        },
    };

    return return_data;
};

/**
Get a specific number of campaigns from a given start point for a given category.

i.e. CrowdFundrr.campaigns(2, 8, 16); // from category 2, load 8 campaigns, starting at index 16.

@method (campaigns)
**/

CrowdFundrr.campaigns = function(category, load, start){
    if(!this.isCategory(category))
        category = false;
    
    if(!_.isNumber(load) || !_.isNumber(start))
        return false;
    
    load = parseInt(load);
    start = parseInt(start);
    
    var numCampaigns = this.numCampaigns();
    
    if(numCampaigns <= 0)
        return false;
    
    if(start + load > numCampaigns)
        load -= numCampaigns - (start + load); // will need to be tested.
    
    if(load <= 0 || start < 0 || start >= numCampaigns)
        return false;
    
    var carrot = start;
    var loaded = []; // These are the campaigns that will be returned (the ones that meet the criteria.
    
    while(carrot < numCampaigns && loaded.length < load){
        var campaign = this.campaign(carrot);
        
        if(campaign != false && (category === false || campaign.categoryId == category))
            loaded.push(campaign);
        
        carrot += 1;
    }
    
    return loaded;
};

/**
Insert a specific number of campaigns into a collection, from a specific start index, under a specific category.

i.e. CrowdFundrr.insert(Campaigns, 2, 8, 16);

@method (insert)
**/

CrowdFundrr.insert = function(collection, category, load, start){
    var campaigns = this.campaigns(category, load, start);
    
    if(campaigns == false)
        return false;
    
    _.each(campaigns, function(campaign, key){
        var insert_object = {
            name: campaign.name,
            url: campaign.url,
            id: campaign.id,
            progress: campaign.progress,
            website: campaign.website,
            daysToGo: campaign.daysToGo,
            categoryId: campaign.categoryId,
            backers: campaign.backers,
            pledged: campaign.pledged,
            pledgedDisplay: campaign.pledgedDisplay,
            goalDisplay: campaign.goalDisplay,
        };

        collection.insert(insert_object);
    });
};
