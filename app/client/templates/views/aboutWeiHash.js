Template['views_aboutWeiHash'].helpers({
  'contract': function() {
    return 'contract WeiFund {\n    \/\/\/ @notice New Campaign; create a new crowdfunding campaign\n    \/\/\/ @dev This method starts a new crowdfunding campaign and calles the campaigns configuration contract if stated\n    \/\/\/ @param _name The campaign name\n    \/\/\/ @param _beneficiary The address of the beneficiary for this campaign\n    \/\/\/ @param _fundingGoal The funding goal of the campaign. If this goal is not met by the timelimit, all ether will be refunded to the respective contributers\n    \/\/\/ @param _expiry When the campaign will expire and contributions can no longer be made\n    \/\/\/ @param _config The configuration address\n    function newCampaign(string _name, address _beneficiary, uint _fundingGoal, uint _expiry, address _config) {}\n    \n    \/\/\/ @notice Contribute (the campaign ID); contribute ether to a WeiFund campaign\n    \/\/\/ @dev This method will contribute an amount of ether to the campaign at ID _cid. All contribution data will be stored so that the issuance of digital assets can be made out to the contributor address\n    \/\/\/ @param _campaignID (Campaign ID) The ID number of the crowdfunding campaign\n    \/\/\/ @param _beneficiary (Contribute As Address) This allows a user to contribute on behalf of another address, if left empty, the from sender address is used as the primary Funder address\n    function contribute(uint _campaignID, address _beneficiary) {}\n    \n    \/\/\/ @notice Refund (the campaign ID); refund your contribution of a failed or expired crowdfunding campaign. \n    \/\/\/ @dev This method will refund the amount you contributed to a WeiFund campaign, if that campaign has failed to meet it\'s funding goal or has expired.\n    \/\/\/ @param _campaignID (Campaign ID) The ID number of the crowdfunding campaign to be refunded\n    function refund(uint _campaignID) {}\n    \n    \/\/\/ @notice Payout (the campaign ID); this will payout a successfull crowdfunding campaign to the benificiary address\n    \/\/\/ @dev This method will payout a successfull WeiFund crowdfunding campaign to the benificiary address specified. Any person can trigger the payout by calling this method.\n    \/\/\/ @param _campaignID (Campaign ID) The ID number of the crowdfunding campaign\n    function payout(uint _campaignID) {}\n    \n    \/\/\/ @notice User Campaign ID (the address of the user, the user campaign ID); get the campaign ID of one of the users crowdfunding campaigns.\n    \/\/\/ @dev This method will get the campaign ID of one of the users crowdfunding campaigns, by looking up the campaign with a user campaign ID. All campaign owners and their campaigns are stored with WeiFund.\n    \/\/\/ @param _user The address of the campaign operator.\n    \/\/\/ @param _userCampaignID The user campaign ID\n    \/\/\/ @return _campaignID The campaign ID\n    function userCampaignID(address _user, uint _userCampaignID) constant returns (uint _campaignID) {}\n    \n    \/\/\/ @notice Total Number of Campaigns Started for a Given User\n    \/\/\/ @dev This method will get the campaign ID of one of the users crowdfunding campaigns, by looking up the campaign with a user campaign ID. All campaign owners and their campaigns are stored with WeiFund.\n    \/\/\/ @param _user The user\'s address\n    \/\/\/ @return _numCampaigns The number of campaigns\n    function totalUserCampaigns(address _user) constant returns (uint _numCampaigns) {}\n    \n    \/\/\/ @notice The total number of campaigns on WeiFund\n    \/\/\/ @dev This method returns the total number of campaigns on WeiFund as an unsigned integer\n    \/\/\/ @return _numCampaigns The number of campaigns\n    function totalCampaigns() constant returns (uint _numCampaigns) {}\n    \n    \/\/\/ @notice Contributor At ID;\n    \/\/\/ @dev For retrieving the contributor data at a specific contributor ID\n    \/\/\/ @param _campaignID The address of the campaign operator.\n    \/\/\/ @param _contributorID The user campaign ID\n    \/\/\/ @return _contributor, _beneficiary, _amountContributed, _refunded\n    function contributorAt(uint _campaignID, uint _contributorID) constant returns (address _contributor, \n                                                                                            address _beneficiary, \n                                                                                            uint _amountContributed, \n                                                                                            bool _refunded){}\n    function createdAt(uint _campaignID) public constant returns (uint){}\n    function contributorID(uint _campaignID, address _contributor) constant returns (uint) {}\n    function ownerOf(uint _campaignID) constant returns (address){}\n    function beneficiaryOf(uint _campaignID) constant returns (address){}\n    function configOf(uint _campaignID) constant returns (address){}\n    function amountRaisedBy(uint _campaignID) constant returns (uint){}\n    function fundingGoalOf(uint _campaignID) constant returns (uint){}\n    function expiryOf(uint _campaignID) constant returns (uint){}\n    function totalContributors(uint _campaignID) constant returns (uint){}\n    \n    function isContributor(uint _campaignID, address _contributor) constant returns (bool) {}\n    function isOwner(uint _campaignID, address _owner) constant returns (bool){}\n    function hasFailed(uint _campaignID) constant returns (bool){}\n    function isSuccess(uint _campaignID) constant returns (bool){}\n    function isPaidOut(uint _campaignID) constant returns (bool){}\n    function totalRefunded(uint _campaignID) constant returns (uint){}\n    function isRefunded(uint _campaignID) constant returns (bool){}\n    \n    event CampaignCreated(address indexed _owner, uint indexed _campaignID);\n    event Contributed(address indexed _contributor, uint indexed _campaignID, uint _amountContributed);\n    event PaidOut(address indexed _beneficiary, uint indexed _campaignID, uint _amountPaid);\n    event Refunded(address indexed _contributor, uint indexed _campaignID, uint _amountRefunded);\n}\n\ncontract WeiHashInterface {\n    function register(uint _campaignID, bytes _hash){}\n    function unregister(uint _campaignID){}\n\tfunction hashOf(uint _campaignID) constant returns (bytes) {}\n\t\n\tevent HashRegistered(uint indexed _campaignID, address _owner);\n\tevent HashDeregistered(uint indexed _campaignID, address _owner);\n}\n\ncontract WeiHash is WeiHashInterface {\n    mapping(uint =&gt; bytes) public hashes;\n    address public weifundAddr;\n\tuint public version;\n    \n    function WeiHash(address _weifundAddr) {\n        weifundAddr = _weifundAddr;\n\t\tversion = 1;\n    }\n    \n    function register(uint _campaignID, bytes _hash){\n        if(!WeiFund(weifundAddr).isOwner(_campaignID, msg.sender))\n\t\t\tthrow;\n\t\t\n        hashes[_campaignID] = _hash;\n\t\tHashRegistered(_campaignID, msg.sender);\n    }\n    \n    function unregister(uint _campaignID, bytes _hash){\n        if(!WeiFund(weifundAddr).isOwner(_campaignID, msg.sender))\n\t\t\tthrow;\n\t\t\t\n        hashes[_campaignID] = _hash;\n\t\tHashDeregistered(_campaignID, msg.sender);\n    }\n\t\n\tfunction hashOf(uint _campaignID) public constant returns (bytes){\n\t\treturn hashes[_campaignID];\n\t}\n}';
  },
});
